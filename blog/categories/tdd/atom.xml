<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Welcome to My Nerditorium]]></title>
  <link href="http://nerditorium.danielauger.com/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://nerditorium.danielauger.com/"/>
  <updated>2013-08-01T21:55:47-05:00</updated>
  <id>http://nerditorium.danielauger.com/</id>
  <author>
    <name><![CDATA[Daniel Auger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unit Testing a WebAPI DelegatingHandler with a DependencyScope via an HttpMessageInvoker]]></title>
    <link href="http://nerditorium.danielauger.com/blog/2013/02/05/unit-testing-a-webapi-delegatinghandler-with-a-dependencyscope-via-an-httpmessageinvoker/"/>
    <updated>2013-02-05T20:49:00-06:00</updated>
    <id>http://nerditorium.danielauger.com/blog/2013/02/05/unit-testing-a-webapi-delegatinghandler-with-a-dependencyscope-via-an-httpmessageinvoker</id>
    <content type="html"><![CDATA[<p>I've been working with ASP.NET WebAPI on a day-to-day basis for about seven months now, and I have to say that I really appreciate how testable it is. Although the self-hosting capability of WebAPI seems like an obvious way to facilitate a test-first workflow, I personally favor two other methodologies.<!-- more --></p>

<ul>
<li><p>Testing DelegatingHandlers in isolation via HttpMessageInvoker as outlined here: <a href="http://restoncode.azurewebsites.net/blog/2012/10/16/unit-testing-message-handler-in-asp-dot-net-webapi/">Unit Testing Message Handler in Asp.net WebAPI</a></p></li>
<li><p>Testing "everything" via an in-memory HttpServer as outlined here: <a href="http://www.strathweb.com/2012/06/asp-net-web-api-integration-testing-with-in-memory-hosting/">ASP.NET Web API integration testing with in-memory hosting</a></p></li>
</ul>


<p>Testing with dependencies is straightforward with in-memory hosting because it is obvious that you can provide the HttpServer instance with an HttpConfiguration object containing an IDependencyResolver. However, when it comes to testing handlers via an HttpMessageInvoker, it is not entirely obvious or discoverable as to how you can wire up an HttpConfiguration (and therefore an IDependencyResolver).</p>

<p>Here is the secret sauce: you can add an HttpConfiguration to a request object via a "stringly typed" <em>"MS_HttpConfiguration"</em> property on the HttpRequestMessage object.</p>

<p>``` csharp<br/>
[TestMethod]
public void SomeHandlerTest()
{
   // ... other test setup
   // ... set up handlerUnderTest including inner test handler</p>

<p>   request = new HttpRequestMessage(HttpMethod.Get, serverUrl + "/resource/1?someParam=foo");
   request.Properties["MS_HttpConfiguration"] = MethodThatReturnsAnHttpConfigWithDepResolver();</p>

<p>   invoker = new HttpMessageInvoker(handlerUnderTest);</p>

<p>   var response = invoker.SendAsync(request, new CancellationToken())</p>

<pre><code>                              .Result;
</code></pre>

<p>   // ... asserts
}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD Pattern: Broken Test as a Context Bookmark]]></title>
    <link href="http://nerditorium.danielauger.com/blog/2013/01/21/tdd-pattern-broken-test-as-a-context-bookmark/"/>
    <updated>2013-01-21T22:13:00-06:00</updated>
    <id>http://nerditorium.danielauger.com/blog/2013/01/21/tdd-pattern-broken-test-as-a-context-bookmark</id>
    <content type="html"><![CDATA[<p>I've been meaning to write about this technique for many years now, but two things have finally influenced me to put the words down: <!-- more --></p>

<ol>
<li>I took a trip last week which kept me from coding, and I used this technique to get me back on track this morning.</li>
<li>I came across this post today about context switching: <a href="http://blog.ninlabs.com/2013/01/programmer-interrupted/">Programmer Interrupted</a></li>
</ol>


<p>The technique is this simple. Leave yourself a failing unit test at the end of the day as a reminder of where you were. This will help you get back into the flow the next time you start coding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Should .NET Auto Properties Have Unit Tests?]]></title>
    <link href="http://nerditorium.danielauger.com/blog/2010/07/19/should-net-auto-properties-have-unit-tests/"/>
    <updated>2010-07-19T12:16:00-05:00</updated>
    <id>http://nerditorium.danielauger.com/blog/2010/07/19/should-net-auto-properties-have-unit-tests</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/postimages/testing_vader_scaled_thumb.jpg">
Should .NET auto properties be unit tested? It is very easy to argue that testing auto properties falls into the “testing the .NET framework” smell and is a waste of time. However, experience has shown me otherwise. This is something that I’ve gone back and forth on many times since auto properties were introduced. For the time being, I think I’ve reached a conclusion. That conclusion is yes. <!-- more --></p>

<p>I typically do two types of testing: 1) Test Driven Design, and 2) Test while/after unit testing. Let’s consider these two scenarios.</p>

<p>When doing test driven design, there is no question. You should write tests for your auto properties. Test driven design is not about testing; it’s about design. The rule of thumb is that you don’t write any code without a test dictating its need. Case closed (in general).</p>

<p>Things get trickier when doing test while/after unit testing. This type of testing is more about creating a test harness. When writing tests after the fact, I know that the property is implemented using auto properties. Therefore, if I am taking a white box approach, I know that my implementation of the encapsulated property is simply the .NET framework. Following that line of thought, testing auto properties is testing the .NET framework. However, I tend to view test while/after testing as a test harness of the public contract. This is black box testing. A public property is an encapsulation, and therefore it should be tested. It’s not uncommon for an auto property to be converted into a regular property as an application lives on. I’d have to say that I would want a test there to capture any publicly facing change in that encapsulation</p>
]]></content>
  </entry>
  
</feed>
